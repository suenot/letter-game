"use client"

import type React from "react"

import { useState, useEffect, useRef } from "react"
import { motion, AnimatePresence } from "framer-motion"
import Image from "next/image"
import confetti from "canvas-confetti"
import { Menu, X, Settings, Eye, EyeOff } from "lucide-react"

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å–∫–ª–æ–Ω–µ–Ω–∏—è —Å–ª–æ–≤
function pluralizeRussian(count: number, one: string, few: string, many: string): string {
  if (count % 10 === 1 && count % 100 !== 11) {
    return `${count} ${one}`
  } else if ([2, 3, 4].includes(count % 10) && ![12, 13, 14].includes(count % 100)) {
    return `${count} ${few}`
  } else {
    return `${count} ${many}`
  }
}

// –ù–∞–±–æ—Ä—ã —Å–ª–æ–≤ (—É—Ä–æ–≤–Ω–∏) —Å —Ç–µ–º–∞–º–∏ –∏ —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
const wordSets = [
  {
    id: 1,
    title: "–ñ–∏–≤–æ—Ç–Ω—ã–µ",
    words: [
      {
        word: "–∫–æ—à–∫–∞",
        image: "https://images.unsplash.com/photo-1514888286974-6c03e2ca1dba?w=200&h=200&fit=crop",
        hint: "–ñ–∏–≤–æ—Ç–Ω–æ–µ",
      },
      {
        word: "—Å–ª–æ–Ω",
        image: "https://images.unsplash.com/photo-1557050543-4d5f4e07ef46?w=200&h=200&fit=crop",
        hint: "–ë–æ–ª—å—à–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ",
      },
      {
        word: "—Ä—ã–±–∫–∞",
        image: "https://images.unsplash.com/photo-1522069169874-c58ec4b76be5?w=200&h=200&fit=crop",
        hint: "–ü–ª–∞–≤–∞–µ—Ç –≤ –≤–æ–¥–µ",
      },
    ],
    reward: "ü¶Å",
  },
  {
    id: 2,
    title: "–§—Ä—É–∫—Ç—ã",
    words: [
      {
        word: "—è–±–ª–æ–∫–æ",
        image: "https://images.unsplash.com/photo-1560806887-1e4cd0b6cbd6?w=200&h=200&fit=crop",
        hint: "–ö—Ä–∞—Å–Ω—ã–π —Ñ—Ä—É–∫—Ç",
      },
      {
        word: "–±–∞–Ω–∞–Ω",
        image: "https://images.unsplash.com/photo-1571771894821-ce9b6c11b08e?w=200&h=200&fit=crop",
        hint: "–ñ—ë–ª—Ç—ã–π —Ñ—Ä—É–∫—Ç",
      },
      {
        word: "–≥—Ä—É—à–∞",
        image: "https://images.unsplash.com/photo-1607522370275-1421e326fae2?w=200&h=200&fit=crop",
        hint: "–°–ª–∞–¥–∫–∏–π —Ñ—Ä—É–∫—Ç",
      },
    ],
    reward: "üçé",
  },
  {
    id: 3,
    title: "–ò–≥—Ä—É—à–∫–∏",
    words: [
      {
        word: "–º–∏—à–∫–∞",
        image: "https://images.unsplash.com/photo-1596461404969-9ae70f2830c1?w=200&h=200&fit=crop",
        hint: "–ú—è–≥–∫–∞—è –∏–≥—Ä—É—à–∫–∞",
      },
      {
        word: "–º—è—á",
        image: "https://images.unsplash.com/photo-1600185365483-26d7a4cc7519?w=200&h=200&fit=crop",
        hint: "–ö—Ä—É–≥–ª–∞—è –∏–≥—Ä—É—à–∫–∞",
      },
      {
        word: "–∫—É–∫–ª–∞",
        image: "https://images.unsplash.com/photo-1589874186480-ecd5076c0b8f?w=200&h=200&fit=crop",
        hint: "–ò–≥—Ä—É—à–∫–∞ –¥–ª—è –¥–µ–≤–æ—á–µ–∫",
      },
    ],
    reward: "üß∏",
  },
  {
    id: 4,
    title: "–ï–¥–∞",
    words: [
      {
        word: "—Å—É–ø",
        image: "https://images.unsplash.com/photo-1547592166-23ac45744acd?w=200&h=200&fit=crop",
        hint: "–ñ–∏–¥–∫–æ–µ –±–ª—é–¥–æ",
      },
      {
        word: "—Ç–æ—Ä—Ç",
        image: "https://images.unsplash.com/photo-1578985545062-69928b1d9587?w=200&h=200&fit=crop",
        hint: "–°–ª–∞–¥–∫–æ–µ –Ω–∞ –ø—Ä–∞–∑–¥–Ω–∏–∫",
      },
      {
        word: "—Ö–ª–µ–±",
        image: "https://images.unsplash.com/photo-1509440159596-0249088772ff?w=200&h=200&fit=crop",
        hint: "–í—ã–ø–µ—á–∫–∞",
      },
    ],
    reward: "üç∞",
  },
  {
    id: 5,
    title: "–î–æ–º",
    words: [
      {
        word: "—Å—Ç–æ–ª",
        image: "https://images.unsplash.com/photo-1567538096630-e0c55bd6374c?w=200&h=200&fit=crop",
        hint: "–ú–µ–±–µ–ª—å",
      },
      {
        word: "–æ–∫–Ω–æ",
        image: "https://images.unsplash.com/photo-1499793983690-e29da59ef1c2?w=200&h=200&fit=crop",
        hint: "–ß–µ—Ä–µ–∑ –Ω–µ–≥–æ —Å–º–æ—Ç—Ä–∏–º –Ω–∞ —É–ª–∏—Ü—É",
      },
      {
        word: "–¥–≤–µ—Ä—å",
        image: "https://images.unsplash.com/photo-1595526114035-0d45a16a0f05?w=200&h=200&fit=crop",
        hint: "–ß–µ—Ä–µ–∑ –Ω–µ—ë –≤—Ö–æ–¥–∏–º –≤ –¥–æ–º",
      },
    ],
    reward: "üè†",
  },
]

// –ó–≤—É–∫–∏ –¥–ª—è —É—Å–ø–µ—Ö–∞
const successSounds = [
  "—É—Ä–∞!",
  "–º–æ–ª–æ–¥–µ—Ü!",
  "—Å—É–ø–µ—Ä!",
  "–æ—Ç–ª–∏—á–Ω–æ!",
  "–∫–ª–∞—Å—Å!",
  "–∑–¥–æ—Ä–æ–≤–æ!",
  "–≤–∞—É!",
  "—Ç—ã —É–º–Ω–∏—Ü–∞!",
  "–±—Ä–∞–≤–æ!",
  "—Ç–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!",
]

export default function LetterGame() {
  const [currentSetIndex, setCurrentSetIndex] = useState(0)
  const [currentWordIndex, setCurrentWordIndex] = useState(0)
  const [missingLetterIndex, setMissingLetterIndex] = useState(0)
  const [letters, setLetters] = useState<string[]>([])
  const [isCorrect, setIsCorrect] = useState<boolean | null>(null)
  const [selectedLetter, setSelectedLetter] = useState<string | null>(null)
  const [filledLetter, setFilledLetter] = useState<string | null>(null)
  const [collectedRewards, setCollectedRewards] = useState<string[]>([])
  const [completedSets, setCompletedSets] = useState<number[]>([])
  const [showBalloon, setShowBalloon] = useState(false)
  const [currentSound, setCurrentSound] = useState("")
  const [showTreasureChest, setShowTreasureChest] = useState(false)
  const [chestOpened, setChestOpened] = useState(false)
  const [drawerOpen, setDrawerOpen] = useState(false)
  const [showSettingsTab, setShowSettingsTab] = useState(false)
  const [showImageAtStart, setShowImageAtStart] = useState(true)
  const gapRef = useRef<HTMLDivElement>(null)

  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –Ω–∞–±–æ—Ä —Å–ª–æ–≤ –∏ —Å–ª–æ–≤–æ
  const currentSet = wordSets[currentSetIndex]
  const currentWordSet = currentSet.words
  const currentWord = currentWordSet[currentWordIndex].word

  // –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ —Ç–µ–∫—É—â–µ–º –Ω–∞–±–æ—Ä–µ
  const progress = (currentWordIndex / currentWordSet.length) * 100

  // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏–≥—Ä—ã
  useEffect(() => {
    prepareGame()
  }, [currentSetIndex, currentWordIndex])

  const prepareGame = () => {
    const word = currentWord
    // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–π –±—É–∫–≤—ã
    const randomIndex = Math.floor(Math.random() * word.length)
    setMissingLetterIndex(randomIndex)

    // –°–æ–∑–¥–∞–µ–º –Ω–∞–±–æ—Ä –±—É–∫–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞ (–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è + —Å–ª—É—á–∞–π–Ω—ã–µ)
    const correctLetter = word[randomIndex]
    const alphabet = "–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è"
    const randomLetters = []

    // –î–æ–±–∞–≤–ª—è–µ–º 3 —Å–ª—É—á–∞–π–Ω—ã–µ –±—É–∫–≤—ã
    while (randomLetters.length < 3) {
      const randLetter = alphabet[Math.floor(Math.random() * alphabet.length)]
      if (randLetter !== correctLetter && !randomLetters.includes(randLetter)) {
        randomLetters.push(randLetter)
      }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –±—É–∫–≤—É –∏ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º
    randomLetters.push(correctLetter)
    setLetters(randomLetters.sort(() => Math.random() - 0.5))
    setIsCorrect(null)
    setSelectedLetter(null)
    setFilledLetter(null)
    setShowBalloon(false)
    setCurrentSound("")
  }

  const handleLetterClick = (letter: string) => {
    if (isCorrect !== null || selectedLetter !== null) return

    setSelectedLetter(letter)
    setFilledLetter(letter)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
    const correctLetter = currentWord[missingLetterIndex]

    if (letter === correctLetter) {
      setIsCorrect(true)

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–æ–∑–¥—É—à–Ω—ã–π —à–∞—Ä–∏–∫
      setShowBalloon(true)

      // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –∑–≤—É–∫ —É—Å–ø–µ—Ö–∞
      setCurrentSound(successSounds[Math.floor(Math.random() * successSounds.length)])

      // –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ñ–µ—Ç—Ç–∏ –ø—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –æ—Ç–≤–µ—Ç–µ
      confetti({
        particleCount: 50,
        spread: 70,
        origin: { y: 0.6 },
      })

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –ª–∏ –Ω–∞–±–æ—Ä —Å–ª–æ–≤
      const isLastWordInSet = currentWordIndex === currentWordSet.length - 1

      if (isLastWordInSet) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—É–Ω–¥—É–∫ —Å –Ω–∞–≥—Ä–∞–¥–æ–π –∑–∞ –Ω–∞–±–æ—Ä
        setTimeout(() => {
          setShowTreasureChest(true)
          setChestOpened(false)
        }, 1000)
      } else {
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–ª–æ–≤—É —á–µ—Ä–µ–∑ 1.5 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
          setCurrentWordIndex(currentWordIndex + 1)
        }, 1500)
      }
    } else {
      setIsCorrect(false)

      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
      setTimeout(() => {
        setIsCorrect(null)
        setSelectedLetter(null)
        setFilledLetter(null)
      }, 1000)
    }
  }

  const handleDrop = (e: React.DragEvent, targetLetter: string) => {
    e.preventDefault()
    const letter = e.dataTransfer.getData("letter")

    if (letter) {
      handleLetterClick(letter)
    }
  }

  const handleDragStart = (e: React.DragEvent, letter: string) => {
    e.dataTransfer.setData("letter", letter)
  }

  const handleDragOver = (e: React.DragEvent) => {
    e.preventDefault()
  }

  const handleOpenChest = () => {
    setChestOpened(true)

    // –ó–∞–ø—É—Å–∫–∞–µ–º –º–Ω–æ–≥–æ –∫–æ–Ω—Ñ–µ—Ç—Ç–∏
    confetti({
      particleCount: 200,
      spread: 180,
      origin: { y: 0.6 },
      colors: ["#FFD700", "#FFA500", "#FF4500", "#FF1493", "#9400D3"],
    })

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—É –∑–∞ –Ω–∞–±–æ—Ä
    setCollectedRewards((prev) => [...prev, currentSet.reward])

    // –û—Ç–º–µ—á–∞–µ–º –Ω–∞–±–æ—Ä –∫–∞–∫ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–π
    setCompletedSets((prev) => {
      if (!prev.includes(currentSet.id)) {
        return [...prev, currentSet.id]
      }
      return prev
    })

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å—É–Ω–¥—É–∫ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –Ω–∞–±–æ—Ä—É —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
      setShowTreasureChest(false)

      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –Ω–∞–±–æ—Ä—É –∏–ª–∏ –Ω–∞—á–∏–Ω–∞–µ–º —Å–Ω–∞—á–∞–ª–∞
      if (currentSetIndex < wordSets.length - 1) {
        setCurrentSetIndex(currentSetIndex + 1)
      } else {
        setCurrentSetIndex(0)
      }

      setCurrentWordIndex(0)
    }, 2000)
  }

  const selectWordSet = (index: number) => {
    if (showTreasureChest) return // –ù–µ –º–µ–Ω—è–µ–º –Ω–∞–±–æ—Ä, –µ—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç —Å—É–Ω–¥—É–∫

    setCurrentSetIndex(index)
    setCurrentWordIndex(0)
    setDrawerOpen(false)
  }

  const toggleImageSetting = () => {
    setShowImageAtStart(!showImageAtStart)
  }

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
  const shouldShowImage = showImageAtStart || isCorrect === true

  // –í—ã—á–∏—Å–ª—è–µ–º, —Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å –≤ –Ω–∞–±–æ—Ä–µ
  const wordsLeftInSet = currentWordSet.length - currentWordIndex

  return (
    <div className="flex flex-col items-center justify-center min-h-screen bg-gradient-to-r from-blue-100 to-purple-100 p-4 overflow-hidden">
      {/* –ö–Ω–æ–ø–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ */}
      <button
        onClick={() => setDrawerOpen(true)}
        className="fixed top-4 right-4 z-30 bg-purple-500 text-white p-2 rounded-full shadow-lg hover:bg-purple-600 transition-colors"
        aria-label="–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é"
      >
        <Menu size={24} />
      </button>

      {/* –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å */}
      <AnimatePresence>
        {drawerOpen && (
          <>
            {/* –ó–∞—Ç–µ–º–Ω–µ–Ω–∏–µ —Ñ–æ–Ω–∞ */}
            <motion.div
              initial={{ opacity: 0 }}
              animate={{ opacity: 0.5 }}
              exit={{ opacity: 0 }}
              className="fixed inset-0 bg-black z-40"
              onClick={() => setDrawerOpen(false)}
            />

            {/* –ü–∞–Ω–µ–ª—å */}
            <motion.div
              initial={{ x: "100%" }}
              animate={{ x: 0 }}
              exit={{ x: "100%" }}
              transition={{ type: "spring", damping: 20 }}
              className="fixed top-0 right-0 h-full w-72 bg-white shadow-xl z-50 p-4 overflow-y-auto"
            >
              <div className="flex justify-between items-center mb-6">
                <div className="flex items-center">
                  <h2 className={`text-xl font-bold ${showSettingsTab ? "text-gray-400" : "text-purple-700"}`}>–¢–µ–º—ã</h2>
                  <button
                    onClick={() => setShowSettingsTab(false)}
                    className={`ml-2 ${!showSettingsTab ? "bg-purple-100 text-purple-700" : "bg-gray-100 text-gray-500"} rounded-md px-2 py-1 text-xs`}
                  >
                    –¢–µ–º—ã
                  </button>
                  <button
                    onClick={() => setShowSettingsTab(true)}
                    className={`ml-1 ${showSettingsTab ? "bg-purple-100 text-purple-700" : "bg-gray-100 text-gray-500"} rounded-md px-2 py-1 text-xs flex items-center`}
                  >
                    <Settings size={12} className="mr-1" />
                    –ù–∞—Å—Ç—Ä–æ–π–∫–∏
                  </button>
                </div>
                <button
                  onClick={() => setDrawerOpen(false)}
                  className="text-gray-500 hover:text-gray-700"
                  aria-label="–ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é"
                >
                  <X size={24} />
                </button>
              </div>

              {!showSettingsTab ? (
                // –í–∫–ª–∞–¥–∫–∞ —Å —Ç–µ–º–∞–º–∏
                <div className="space-y-3">
                  {wordSets.map((set, index) => (
                    <motion.div
                      key={set.id}
                      whileHover={{ scale: 1.03 }}
                      whileTap={{ scale: 0.98 }}
                      onClick={() => selectWordSet(index)}
                      className={`
                        p-3 rounded-xl cursor-pointer transition-colors
                        ${
                          completedSets.includes(set.id)
                            ? "bg-green-100 border-2 border-green-300"
                            : "bg-gray-100 hover:bg-gray-200"
                        }
                        ${currentSetIndex === index ? "border-2 border-purple-400" : ""}
                      `}
                    >
                      <div className="flex items-center">
                        <span className="text-2xl mr-3">{set.reward}</span>
                        <div>
                          <h3 className="font-bold">{set.title}</h3>
                          <p className="text-sm text-gray-600">
                            {pluralizeRussian(set.words.length, "—Å–ª–æ–≤–æ", "—Å–ª–æ–≤–∞", "—Å–ª–æ–≤")}
                          </p>
                        </div>
                        {completedSets.includes(set.id) && <span className="ml-auto text-green-500 text-xl">‚úì</span>}
                      </div>
                    </motion.div>
                  ))}

                  <div className="mt-6 pt-4 border-t border-gray-200">
                    <h3 className="font-bold text-purple-700 mb-2">–¢–≤–æ–∏ –Ω–∞–≥—Ä–∞–¥—ã:</h3>
                    <div className="flex flex-wrap gap-2">
                      {collectedRewards.map((reward, index) => (
                        <div key={index} className="text-2xl">
                          {reward}
                        </div>
                      ))}
                      {collectedRewards.length === 0 && (
                        <p className="text-sm text-gray-500">–ü—Ä–æ–π–¥–∏ —É—Ä–æ–≤–µ–Ω—å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É!</p>
                      )}
                    </div>
                  </div>
                </div>
              ) : (
                // –í–∫–ª–∞–¥–∫–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
                <div className="space-y-4">
                  <h3 className="font-bold text-purple-700 mb-3">–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã</h3>

                  <div className="bg-gray-100 p-3 rounded-xl">
                    <div className="flex justify-between items-center">
                      <div>
                        <h4 className="font-medium">–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É</h4>
                        <p className="text-sm text-gray-600">
                          {showImageAtStart ? "–ö–∞—Ä—Ç–∏–Ω–∫–∞ –≤–∏–¥–Ω–∞ —Å—Ä–∞–∑—É" : "–ö–∞—Ä—Ç–∏–Ω–∫–∞ –ø–æ—è–≤–∏—Ç—Å—è –ø–æ—Å–ª–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞"}
                        </p>
                      </div>
                      <button
                        onClick={toggleImageSetting}
                        className={`p-2 rounded-full ${showImageAtStart ? "bg-green-100 text-green-600" : "bg-gray-200 text-gray-500"}`}
                      >
                        {showImageAtStart ? <Eye size={20} /> : <EyeOff size={20} />}
                      </button>
                    </div>
                  </div>

                  <div className="mt-4 text-sm text-gray-500">
                    <p>–í–µ—Ä—Å–∏—è –∏–≥—Ä—ã: 1.0</p>
                    <p className="mt-1">–†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ –¥–ª—è –ú–∞–∫—Å–∞ üöÄ</p>
                  </div>
                </div>
              )}
            </motion.div>
          </>
        )}
      </AnimatePresence>

      <h1 className="text-3xl md:text-4xl font-bold text-purple-600 mb-4 text-center">
        –ü—Ä–∏–≤–µ—Ç, –ú–∞–∫—Å! –î–∞–≤–∞–π –Ω–∞–π–¥–µ–º –±—É–∫–≤—É!
      </h1>

      {/* –ö–æ–ª–ª–µ–∫—Ü–∏—è –Ω–∞–≥—Ä–∞–¥ */}
      <div className="flex flex-wrap justify-center gap-3 mb-4 max-w-md">
        {collectedRewards.map((reward, index) => (
          <motion.div
            key={index}
            initial={{ scale: 0 }}
            animate={{ scale: 1, rotate: [0, 10, -10, 0] }}
            transition={{ duration: 0.5, delay: 0.1 * (collectedRewards.length - index - 1) }}
            className="text-4xl"
          >
            {reward}
          </motion.div>
        ))}
      </div>

      <div className="bg-white rounded-3xl shadow-xl p-6 w-full max-w-md relative">
        {/* –í–æ–∑–¥—É—à–Ω—ã–π —à–∞—Ä–∏–∫ —Å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ–º */}
        <AnimatePresence>
          {showBalloon && (
            <motion.div
              initial={{ y: 50, opacity: 0 }}
              animate={{ y: -100, opacity: 1 }}
              exit={{ y: -200, opacity: 0 }}
              transition={{ duration: 2 }}
              className="absolute top-0 left-1/2 transform -translate-x-1/2 z-10"
            >
              <div className="relative">
                <div className="text-6xl">üéà</div>
                <div className="absolute top-8 left-1/2 transform -translate-x-1/2 bg-yellow-300 px-3 py-1 rounded-xl text-sm font-bold whitespace-nowrap">
                  {currentSound}
                </div>
              </div>
            </motion.div>
          )}
        </AnimatePresence>

        {/* –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ç–µ–º—ã */}
        <div className="absolute top-2 left-2">
          <span className="bg-purple-100 text-purple-700 px-3 py-1 rounded-full text-sm font-bold">
            {currentSet.title}
          </span>
        </div>

        <div className="flex justify-center mb-4 mt-4">
          {shouldShowImage ? (
            <Image
              src={currentWordSet[currentWordIndex].image || "/placeholder.svg"}
              alt={currentWord}
              width={200}
              height={200}
              className="rounded-xl"
            />
          ) : (
            <div className="w-[200px] h-[200px] bg-gray-200 rounded-xl flex items-center justify-center">
              <motion.div
                animate={{ rotate: 360 }}
                transition={{ duration: 2, repeat: Number.POSITIVE_INFINITY, ease: "linear" }}
                className="text-7xl text-red-500"
              >
                ‚ùì
              </motion.div>
            </div>
          )}
        </div>

        <p className="text-center text-gray-600 mb-4">{currentWordSet[currentWordIndex].hint}</p>

        <div className="flex justify-center mb-8">
          {currentWord.split("").map((letter, index) => (
            <div
              key={index}
              className={`
                w-16 h-16 mx-1 flex items-center justify-center text-3xl font-bold 
                ${
                  index === missingLetterIndex
                    ? "border-4 border-dashed border-blue-400 rounded-lg"
                    : "bg-blue-100 rounded-lg"
                }
              `}
              ref={index === missingLetterIndex ? gapRef : null}
              onDrop={index === missingLetterIndex ? (e) => handleDrop(e, letter) : undefined}
              onDragOver={index === missingLetterIndex ? handleDragOver : undefined}
            >
              {index !== missingLetterIndex ? (
                letter
              ) : (
                <motion.div
                  initial={filledLetter ? { scale: 0 } : false}
                  animate={filledLetter ? { scale: 1 } : false}
                  transition={{ type: "spring", stiffness: 300, damping: 20 }}
                  className={`
                    ${isCorrect === true ? "text-green-600" : ""}
                    ${isCorrect === false ? "text-red-600" : ""}
                  `}
                >
                  {filledLetter}
                </motion.div>
              )}
            </div>
          ))}
        </div>

        <div className="flex justify-center space-x-4 mb-6">
          {letters.map((letter, index) => (
            <motion.div
              key={index}
              draggable={selectedLetter !== letter}
              onDragStart={(e) => handleDragStart(e, letter)}
              whileHover={{ scale: 1.1 }}
              whileTap={{ scale: 0.95 }}
              onClick={() => handleLetterClick(letter)}
              className={`
                w-16 h-16 bg-yellow-400 rounded-xl text-3xl font-bold shadow-md 
                hover:bg-yellow-300 transition-colors flex items-center justify-center
                cursor-pointer select-none
                ${selectedLetter === letter ? "opacity-0" : "opacity-100"}
              `}
            >
              {letter}
            </motion.div>
          ))}
        </div>

        {isCorrect !== null && (
          <div className={`text-center text-xl font-bold ${isCorrect ? "text-green-500" : "text-red-500"}`}>
            {isCorrect ? "–ü—Ä–∞–≤–∏–ª—å–Ω–æ! –ú–æ–ª–æ–¥–µ—Ü! üéâ" : "–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑! üôÇ"}
          </div>
        )}
      </div>

      {/* –°—É–Ω–¥—É–∫ —Å —Å–æ–∫—Ä–æ–≤–∏—â–∞–º–∏ */}
      <AnimatePresence>
        {showTreasureChest && (
          <motion.div
            initial={{ scale: 0, y: 100 }}
            animate={{ scale: 1, y: 0 }}
            exit={{ scale: 0, y: 100 }}
            transition={{ type: "spring", stiffness: 300, damping: 15 }}
            className="fixed inset-0 flex items-center justify-center bg-black/50 z-50"
            onClick={chestOpened ? undefined : handleOpenChest}
          >
            <motion.div
              className="bg-gradient-to-b from-yellow-200 to-yellow-400 p-8 rounded-3xl flex flex-col items-center"
              whileHover={chestOpened ? {} : { scale: 1.05 }}
            >
              <h2 className="text-2xl font-bold mb-4 text-center">
                {chestOpened ? "–í–æ—Ç —Ç–≤–æ—è –Ω–∞–≥—Ä–∞–¥–∞!" : "–ù–∞–∂–º–∏ –Ω–∞ —Å—É–Ω–¥—É–∫!"}
              </h2>
              <motion.div
                className="text-8xl cursor-pointer"
                animate={chestOpened ? { rotate: [0, -5, 5, -5, 5, 0], scale: [1, 1.2, 1] } : {}}
              >
                {chestOpened ? currentSet.reward : "üéÅ"}
              </motion.div>
              {chestOpened && (
                <motion.div
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  className="mt-4 text-xl font-bold text-purple-800"
                >
                  –°—É–ø–µ—Ä! –¢—ã –ø—Ä–æ—à—ë–ª —Ç–µ–º—É "{currentSet.title}"!
                </motion.div>
              )}
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* –ü—Ä–æ–≥—Ä–µ—Å—Å */}
      <div className="mt-6 flex flex-col items-center">
        <div className="w-64 h-8 bg-gray-200 rounded-full overflow-hidden">
          <motion.div
            className="h-full bg-gradient-to-r from-pink-400 to-purple-500"
            initial={{ width: `${progress}%` }}
            animate={{ width: `${progress}%` }}
            transition={{ duration: 0.5 }}
          />
        </div>
        <div className="mt-3 flex flex-col items-center">
          <div className="text-lg font-medium text-purple-700 mb-2">
            –û—Å—Ç–∞–ª–æ—Å—å: {pluralizeRussian(wordsLeftInSet, "—Å–ª–æ–≤–æ", "—Å–ª–æ–≤–∞", "—Å–ª–æ–≤")}
          </div>
          <div className="flex space-x-2">
            {Array.from({ length: wordsLeftInSet }).map((_, index) => (
              <motion.div
                key={index}
                initial={{ scale: 0 }}
                animate={{ scale: 1 }}
                transition={{ delay: index * 0.1, type: "spring" }}
                className="w-10 h-10 bg-white border-2 border-purple-300 rounded-lg flex items-center justify-center shadow-md"
              >
                <span className="text-xl">üîÆ</span>
              </motion.div>
            ))}
          </div>
        </div>
      </div>
    </div>
  )
}

